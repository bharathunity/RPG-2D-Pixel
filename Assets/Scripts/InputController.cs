//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""005755fa-efb4-4371-afb8-757590320150"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c63f7f9a-a2fa-428c-b55a-3a681e44cc27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Button"",
                    ""id"": ""51d7c620-94d3-4a56-b0b6-60b74ade6c8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""376a2bc3-35fa-4471-bb5c-c4dcd75b12c5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d0c9a2b6-365e-405f-978e-1dc810efef1d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""29327c7a-9022-41cb-aba2-588d24032407"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""afd8b68e-b7b7-4f08-b331-b72d86f3eb47"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""4f64a4f3-ccbd-4211-8d47-08688707886c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""262995aa-a91a-4a05-b595-c865cdcb3217"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3feb38b7-9d21-4545-beaf-5803048a4f19"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sword"",
            ""id"": ""5c250a75-9d1c-4238-a69b-f03f43016ecc"",
            ""actions"": [
                {
                    ""name"": ""Swing"",
                    ""type"": ""Button"",
                    ""id"": ""670130f3-e7c1-4a8a-aed9-5c4ab528efa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45e3f42e-eae6-4e97-9661-d214f169d962"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Equip"",
            ""id"": ""ef45a31b-8b0e-4c2d-947a-eb38ebb1fbf6"",
            ""actions"": [
                {
                    ""name"": ""Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""d0bab5e7-4526-4192-9b1b-93fb2d564d63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a16bf73-6b86-468b-a7f7-2741d3655241"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BowArrow"",
            ""id"": ""eb532228-c530-4653-bbe5-db40a4a6d651"",
            ""actions"": [
                {
                    ""name"": ""ArrowRelease"",
                    ""type"": ""Button"",
                    ""id"": ""4f6ee68f-1eed-4ddd-a803-105a42b39d66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d4d41b56-fca3-401b-8a0c-b81b889c5825"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6141bdc2-8de7-4b67-9f7e-2e334d5c06dc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94144398-7678-4fae-9c07-c1e833fd5bd3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Direction = m_Player.FindAction("Direction", throwIfNotFound: true);
        // Sword
        m_Sword = asset.FindActionMap("Sword", throwIfNotFound: true);
        m_Sword_Swing = m_Sword.FindAction("Swing", throwIfNotFound: true);
        // Equip
        m_Equip = asset.FindActionMap("Equip", throwIfNotFound: true);
        m_Equip_Weapon = m_Equip.FindAction("Weapon", throwIfNotFound: true);
        // BowArrow
        m_BowArrow = asset.FindActionMap("BowArrow", throwIfNotFound: true);
        m_BowArrow_ArrowRelease = m_BowArrow.FindAction("ArrowRelease", throwIfNotFound: true);
        m_BowArrow_Movement = m_BowArrow.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Direction;
    public struct PlayerActions
    {
        private @InputController m_Wrapper;
        public PlayerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Direction => m_Wrapper.m_Player_Direction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Direction.started += instance.OnDirection;
            @Direction.performed += instance.OnDirection;
            @Direction.canceled += instance.OnDirection;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Direction.started -= instance.OnDirection;
            @Direction.performed -= instance.OnDirection;
            @Direction.canceled -= instance.OnDirection;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Sword
    private readonly InputActionMap m_Sword;
    private List<ISwordActions> m_SwordActionsCallbackInterfaces = new List<ISwordActions>();
    private readonly InputAction m_Sword_Swing;
    public struct SwordActions
    {
        private @InputController m_Wrapper;
        public SwordActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swing => m_Wrapper.m_Sword_Swing;
        public InputActionMap Get() { return m_Wrapper.m_Sword; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwordActions set) { return set.Get(); }
        public void AddCallbacks(ISwordActions instance)
        {
            if (instance == null || m_Wrapper.m_SwordActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwordActionsCallbackInterfaces.Add(instance);
            @Swing.started += instance.OnSwing;
            @Swing.performed += instance.OnSwing;
            @Swing.canceled += instance.OnSwing;
        }

        private void UnregisterCallbacks(ISwordActions instance)
        {
            @Swing.started -= instance.OnSwing;
            @Swing.performed -= instance.OnSwing;
            @Swing.canceled -= instance.OnSwing;
        }

        public void RemoveCallbacks(ISwordActions instance)
        {
            if (m_Wrapper.m_SwordActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwordActions instance)
        {
            foreach (var item in m_Wrapper.m_SwordActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwordActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwordActions @Sword => new SwordActions(this);

    // Equip
    private readonly InputActionMap m_Equip;
    private List<IEquipActions> m_EquipActionsCallbackInterfaces = new List<IEquipActions>();
    private readonly InputAction m_Equip_Weapon;
    public struct EquipActions
    {
        private @InputController m_Wrapper;
        public EquipActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Weapon => m_Wrapper.m_Equip_Weapon;
        public InputActionMap Get() { return m_Wrapper.m_Equip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EquipActions set) { return set.Get(); }
        public void AddCallbacks(IEquipActions instance)
        {
            if (instance == null || m_Wrapper.m_EquipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EquipActionsCallbackInterfaces.Add(instance);
            @Weapon.started += instance.OnWeapon;
            @Weapon.performed += instance.OnWeapon;
            @Weapon.canceled += instance.OnWeapon;
        }

        private void UnregisterCallbacks(IEquipActions instance)
        {
            @Weapon.started -= instance.OnWeapon;
            @Weapon.performed -= instance.OnWeapon;
            @Weapon.canceled -= instance.OnWeapon;
        }

        public void RemoveCallbacks(IEquipActions instance)
        {
            if (m_Wrapper.m_EquipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEquipActions instance)
        {
            foreach (var item in m_Wrapper.m_EquipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EquipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EquipActions @Equip => new EquipActions(this);

    // BowArrow
    private readonly InputActionMap m_BowArrow;
    private List<IBowArrowActions> m_BowArrowActionsCallbackInterfaces = new List<IBowArrowActions>();
    private readonly InputAction m_BowArrow_ArrowRelease;
    private readonly InputAction m_BowArrow_Movement;
    public struct BowArrowActions
    {
        private @InputController m_Wrapper;
        public BowArrowActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ArrowRelease => m_Wrapper.m_BowArrow_ArrowRelease;
        public InputAction @Movement => m_Wrapper.m_BowArrow_Movement;
        public InputActionMap Get() { return m_Wrapper.m_BowArrow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BowArrowActions set) { return set.Get(); }
        public void AddCallbacks(IBowArrowActions instance)
        {
            if (instance == null || m_Wrapper.m_BowArrowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BowArrowActionsCallbackInterfaces.Add(instance);
            @ArrowRelease.started += instance.OnArrowRelease;
            @ArrowRelease.performed += instance.OnArrowRelease;
            @ArrowRelease.canceled += instance.OnArrowRelease;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IBowArrowActions instance)
        {
            @ArrowRelease.started -= instance.OnArrowRelease;
            @ArrowRelease.performed -= instance.OnArrowRelease;
            @ArrowRelease.canceled -= instance.OnArrowRelease;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IBowArrowActions instance)
        {
            if (m_Wrapper.m_BowArrowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBowArrowActions instance)
        {
            foreach (var item in m_Wrapper.m_BowArrowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BowArrowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BowArrowActions @BowArrow => new BowArrowActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDirection(InputAction.CallbackContext context);
    }
    public interface ISwordActions
    {
        void OnSwing(InputAction.CallbackContext context);
    }
    public interface IEquipActions
    {
        void OnWeapon(InputAction.CallbackContext context);
    }
    public interface IBowArrowActions
    {
        void OnArrowRelease(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
